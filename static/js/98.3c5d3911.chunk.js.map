{"version":3,"file":"static/js/98.3c5d3911.chunk.js","mappings":"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","sources":["components/common/formsControls/FormsControls.tsx","constants/common.ts","helpers/validations.ts","webpack://samurai/./src/pages/profilePage/myPosts/myPosts.module.scss?9a5b","pages/profilePage/myPosts/addPostForm/AddPostForm.tsx","webpack://samurai/./src/pages/profilePage/myPosts/post/post.module.scss?f851","pages/profilePage/myPosts/post/Post.tsx","pages/profilePage/myPosts/MyPosts.tsx","../node_modules/nanoid/index.browser.js","pages/profilePage/myPosts/MyPostsContainer.tsx","webpack://samurai/./src/pages/profilePage/profileInfo/profileInfo.module.scss?2c51","pages/profilePage/profileInfo/profileData/contact/Contact.tsx","pages/profilePage/profileInfo/profileData/ProfileData.tsx","pages/profilePage/profileInfo/ProfileDataForm.tsx","webpack://samurai/./src/pages/profilePage/profileInfo/profileStatus/profileStatus.module.scss?a315","pages/profilePage/profileInfo/profileStatus/ProfileStatus.tsx","pages/profilePage/profileInfo/ProfileInfo.tsx","pages/profilePage/Profile.tsx","pages/profilePage/ProfileContainer.tsx","webpack://samurai/./src/components/common/formsControls/formsControls.module.scss?cbc3","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import React from 'react';\n\nimport { Field } from 'redux-form';\n\nimport styles from './formsControls.module.scss';\n\nexport const FormControl = (props: any) => {\n  const { meta, children } = props;\n\n  const hasError = meta.error && meta.touched;\n\n  return (\n    <div className={hasError ? styles.formControlError : ''}>\n      <div>{children}</div>\n      <div>{hasError && <span>{meta.error}</span>}</div>\n    </div>\n  );\n};\n\nexport const Textarea = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder = '',\n  name: string,\n  validators: any[],\n  component: any,\n  props = {},\n  text = '',\n  wrapperClass: any,\n  fieldClass: any,\n) => (\n  <div className={wrapperClass}>\n    <Field\n      component={component}\n      name={name}\n      placeholder={placeholder}\n      validate={validators}\n      {...props}\n      className={fieldClass}\n    />\n    {text}\n  </div>\n);\n","export const INPUT_MAX_LENGTH = 100;\nexport const MOBILE_USERS_PORTION_SIZE = 5;\nexport const DESKTOP_USERS_PORTION_SIZE = 15;\n","export const required = (value: string) => {\n  if (value) {\n    return undefined;\n  }\n\n  return 'Field is required';\n};\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  }\n\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostsSection\":\"myPosts_myPostsSection__sgwJ5\",\"myPostsTitle\":\"myPosts_myPostsTitle__3xBRA\",\"newPostSection\":\"myPosts_newPostSection__4gcap\",\"newPostCreateField\":\"myPosts_newPostCreateField__FbLps\",\"addPostButton\":\"myPosts_addPostButton__DpfRv\"};","import { INPUT_MAX_LENGTH } from 'constants/common';\n\nimport React from 'react';\n\nimport { Button } from 'components/common/button/Button';\nimport { createField, Textarea } from 'components/common/formsControls/FormsControls';\nimport { maxLengthCreator, required } from 'helpers/validations';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport styles from '../myPosts.module.scss';\n\nimport { AddPostFormDataType, AddPostFormPropsType } from './types';\n\nconst maxLength = maxLengthCreator(INPUT_MAX_LENGTH);\n\nconst AddPostForm = (\n  props: InjectedFormProps<AddPostFormDataType, AddPostFormPropsType> &\n    AddPostFormPropsType,\n) => {\n  const { handleSubmit } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {createField(\n        'Write your post',\n        'newPostText',\n        [required, maxLength],\n        Textarea,\n        {},\n        '',\n        '',\n        styles.newPostCreateField,\n      )}\n      <div>\n        <Button className={styles.addPostButton} type='submit'>\n          Add post\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm<AddPostFormDataType, object>({ form: 'add-new-profile-post' })(\n  AddPostForm,\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"post_post__bn7zH\",\"avatar\":\"post_avatar__adKX4\",\"textBlock\":\"post_textBlock__ydhRP\",\"userMessage\":\"post_userMessage__7CHkI\",\"likesWrapper\":\"post_likesWrapper__rwpSU\",\"likesCount\":\"post_likesCount__DM-ue\"};","import React from 'react';\n\nimport AnonymousUserAvatar from 'assets/images/user.png';\n\nimport styles from './post.module.scss';\nimport { PostPropsType } from './types';\n\nexport const Post = (props: PostPropsType) => {\n  const { message, likesCount, userAvatar } = props;\n\n  return (\n    <div className={styles.post}>\n      <div className={styles.avatar}>\n        <img alt='user avatar' src={userAvatar || AnonymousUserAvatar} />\n      </div>\n      <div className={styles.textBlock}>\n        <p className={styles.userMessage}>{message}</p>\n        <div className={styles.likesWrapper}>\n          <span>\n            {'likes: '}\n            <span className={styles.likesCount}>{likesCount}</span>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { memo } from 'react';\n\nimport { nanoid } from 'nanoid';\n\nimport AddPostForm from './addPostForm/AddPostForm';\nimport { AddPostFormDataType } from './addPostForm/types';\nimport styles from './myPosts.module.scss';\nimport { Post } from './post/Post';\nimport { MyPostsCommonPropsType, MyPostsConnectPropsType } from './types';\n\nexport const MyPosts = memo((props: MyPostsConnectPropsType & MyPostsCommonPropsType) => {\n  const postsElements = props.posts.map((post) => {\n    const { likesCount, message } = post;\n\n    return (\n      <Post\n        key={nanoid()}\n        likesCount={likesCount}\n        message={message}\n        userAvatar={props.userAvatar}\n      />\n    );\n  });\n\n  const addNewPost = (formData: AddPostFormDataType) => {\n    props.addPost(formData.newPostText);\n  };\n\n  if (!props.isOwner) return null;\n\n  return (\n    <div className={styles.myPostsSection}>\n      <h3 className={styles.myPostsTitle}>My posts</h3>\n      <div className={styles.newPostSection}>\n        <AddPostForm onSubmit={addNewPost} />\n      </div>\n      <div>{postsElements}</div>\n    </div>\n  );\n});\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { addPost } from 'store/reducers/profileReducer/profileReducer';\nimport { RootStateType } from 'store/types';\n\nimport { MyPosts } from './MyPosts';\nimport {\n  MapDispatchToPropsType,\n  MapStateToPropsType,\n  MyPostsCommonPropsType,\n} from './types';\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n  return {\n    posts: state.profilePage.posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addPost: (newPostText: string) => {\n      dispatch(addPost(newPostText));\n    },\n  };\n};\n\nexport const MyPostsContainer = connect<\n  MapStateToPropsType,\n  MapDispatchToPropsType,\n  MyPostsCommonPropsType,\n  RootStateType\n>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MyPosts);\n","// extracted by mini-css-extract-plugin\nexport default {\"backgroundImage\":\"profileInfo_backgroundImage__xtVV1\",\"button\":\"profileInfo_button__KdepC\",\"userInfoSection\":\"profileInfo_userInfoSection__yRFtq\",\"editModeContainer\":\"profileInfo_editModeContainer__PdKUV\",\"editFormContainer\":\"profileInfo_editFormContainer__Hv9IL\",\"editModeContacts\":\"profileInfo_editModeContacts__hwmGI\",\"editModeInput\":\"profileInfo_editModeInput__jmd-+\",\"userDescription\":\"profileInfo_userDescription__xtoyn\",\"userName\":\"profileInfo_userName__hv6yg\",\"userInfoText\":\"profileInfo_userInfoText__sfAZ1\",\"flexContainer\":\"profileInfo_flexContainer__h2C-2\",\"contactsSection\":\"profileInfo_contactsSection__9CDOs\",\"contactText\":\"profileInfo_contactText__sWkhl\",\"userAvatarSection\":\"profileInfo_userAvatarSection__HtdXN\",\"userAvatar\":\"profileInfo_userAvatar__E1b8e\",\"inputFileButtonContainer\":\"profileInfo_inputFileButtonContainer__duNY0\",\"inputFile\":\"profileInfo_inputFile__5Ngpe\",\"statusContainer\":\"profileInfo_statusContainer__jMeiW\"};","import React from 'react';\n\nimport styles from '../../profileInfo.module.scss';\n\nimport { ContactPropsType } from './types';\n\nexport const Contact = (props: ContactPropsType) => {\n  const { contactTitle, contactValue } = props;\n\n  return <div className={styles.contactText}>{`${contactTitle}: ${contactValue}`}</div>;\n};\n","import React from 'react';\n\nimport { Button } from 'components/common/button/Button';\nimport { Contact } from 'pages/profilePage/profileInfo/profileData/contact/Contact';\nimport { ProfileContacts } from 'store/reducers/profileReducer/types';\n\nimport styles from '../profileInfo.module.scss';\n\nimport { ProfileDataPropsType } from './types';\n\nexport const ProfileData = (props: ProfileDataPropsType) => {\n  const { profile, isOwner, enableEditMode } = props;\n\n  return (\n    <div className={styles.userDescription}>\n      {isOwner && (\n        <div>\n          <Button className={styles.button} onClick={enableEditMode}>\n            Edit info\n          </Button>\n        </div>\n      )}\n      <div className={styles.userName}>\n        {profile.fullName ? profile.fullName : 'information is absent'}\n      </div>\n      <div className={styles.userInfoText}>\n        {'Looking for a job: '}\n        {profile.lookingForAJob ? 'yes' : 'no'}\n      </div>\n      {profile.lookingForAJobDescription && (\n        <div className={styles.userInfoText}>\n          Skills:\n          {profile.lookingForAJobDescription}\n        </div>\n      )}\n      {profile.aboutMe && (\n        <div className={styles.userInfoText}>\n          About me:\n          {profile.aboutMe}\n        </div>\n      )}\n      {\n        /* if there is at least 1 filled contact then perform the render */\n        !Object.keys(profile.contacts)\n          .map((key) => {\n            return profile.contacts[key as keyof ProfileContacts];\n          })\n          .every((el) => el === null) && (\n          <div>\n            <span className={styles.contactsSection}>Contacts: </span>\n            {Object.keys(profile.contacts).map((key) => {\n              return profile.contacts[key as keyof ProfileContacts] ? (\n                <Contact\n                  contactTitle={key}\n                  contactValue={profile.contacts[key as keyof ProfileContacts]}\n                  key={key}\n                />\n              ) : null;\n            })}\n          </div>\n        )\n      }\n    </div>\n  );\n};\n","import React, { ComponentType } from 'react';\n\nimport { Button } from 'components/common/button/Button';\nimport {\n  createField,\n  Input,\n  Textarea,\n} from 'components/common/formsControls/FormsControls';\nimport inputErrorStyle from 'components/common/formsControls/formsControls.module.scss';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { ProfileType } from 'store/reducers/profileReducer/types';\n\nimport styles from './profileInfo.module.scss';\n\nexport type ProfileDataFormPropsType = {\n  profile: ProfileType;\n};\n\nconst ProfileDataForm: ComponentType<\n  ProfileDataFormPropsType & InjectedFormProps<ProfileType, ProfileDataFormPropsType>\n> = ({ handleSubmit, profile, error }) => {\n  return (\n    <form className={styles.editFormContainer} onSubmit={handleSubmit}>\n      <div>\n        <div>\n          <Button className={styles.button} type='submit'>\n            Save info\n          </Button>\n        </div>\n        {error && <div className={inputErrorStyle.formSummaryError}>{error}</div>}\n        <div className={styles.userInfoText}>\n          <span className={styles.userInfoText}>Full name: </span>\n          {createField(\n            'Full name',\n            'fullName',\n            [],\n            Input,\n            {},\n            '',\n            '',\n            styles.editModeInput,\n          )}\n        </div>\n        <div className={styles.flexContainer}>\n          <span className={styles.userInfoText}>Looking for a job: </span>\n          <div className={styles.editModeInput}>\n            {createField(\n              '',\n              'lookingForAJob',\n              [],\n              Input,\n              { type: 'checkbox' },\n              '',\n              '',\n              '',\n            )}\n          </div>\n        </div>\n        <div>\n          <span className={styles.userInfoText}>Skills: </span>\n          {createField(\n            'Skills',\n            'lookingForAJobDescription',\n            [],\n            Textarea,\n            {},\n            '',\n            '',\n            styles.editModeInput,\n          )}\n        </div>\n        <div>\n          <span className={styles.userInfoText}>About me: </span>\n          {createField(\n            'About me',\n            'aboutMe',\n            [],\n            Textarea,\n            {},\n            '',\n            '',\n            styles.editModeInput,\n          )}\n        </div>\n      </div>\n      <div>\n        <span className={styles.editModeContacts}>Contacts</span>\n\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <div key={key}>\n              <span className={styles.userInfoText}>{key}</span>\n              <span>{': '}</span>\n              {createField(\n                key,\n                `contacts.${key}`,\n                [],\n                Input,\n                {},\n                '',\n                '',\n                styles.editModeInput,\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n};\n\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({\n  form: 'edit-profile',\n})(ProfileDataForm);\n","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"profileStatus_status__FL0S8\",\"editStatus\":\"profileStatus_editStatus__GZf3y\"};","import React, { ChangeEvent, Component } from 'react';\n\nimport styles from './profileStatus.module.scss';\nimport { ProfileStatusPropsType, StateType } from './types';\n\nexport class ProfileStatus extends Component<ProfileStatusPropsType, StateType> {\n  state = {\n    editMode: false,\n    status: this.props.status,\n    isOwner: this.props.isOwner,\n  };\n\n  componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>) {\n    const { status } = this.props;\n\n    if (prevProps.status !== status) {\n      this.setState({\n        status: status,\n      });\n    }\n  }\n\n  onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      status: event.currentTarget.value,\n    });\n  };\n\n  deactivateEditMode = () => {\n    const { updateStatus } = this.props;\n    const { status } = this.state;\n\n    this.setState({\n      editMode: false,\n    });\n\n    updateStatus(status);\n  };\n\n  activateEditMode = () => {\n    const { isOwner } = this.state;\n\n    if (isOwner) {\n      this.setState({\n        editMode: true,\n      });\n    }\n  };\n\n  render() {\n    const { status: propsStatus } = this.props;\n    const { editMode, status: stateStatus } = this.state;\n\n    return (\n      <div>\n        {!editMode ? (\n          <div>\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}\n            <span\n              className={styles.status}\n              onClick={this.activateEditMode}\n              role='button'\n              tabIndex={0}\n            >\n              {propsStatus || 'Status is not set'}\n            </span>\n          </div>\n        ) : (\n          <div>\n            <input\n              autoFocus={true}\n              className={styles.editStatus}\n              onBlur={this.deactivateEditMode}\n              onChange={this.onStatusChange}\n              value={stateStatus}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent, useState } from 'react';\n\nimport profileBackground from 'assets/images/profileBackground.jpg';\nimport AnonymousUserPhoto from 'assets/images/user.png';\nimport { Preloader } from 'components/common/preloader/Preloader';\nimport { ProfileType } from 'store/reducers/profileReducer/types';\n\nimport { ProfileData } from './profileData/ProfileData';\nimport { ProfileDataFormReduxForm } from './ProfileDataForm';\nimport styles from './profileInfo.module.scss';\nimport { ProfileStatus } from './profileStatus/ProfileStatus';\nimport { ProfileInfoPropsType } from './types';\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n  const { profile, isOwner, status, updateStatus, savePhoto, saveProfile } = props;\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files?.length === 1) {\n      savePhoto(event.target.files[0]);\n    }\n  };\n\n  const onSubmit = (profile: ProfileType) => {\n    saveProfile(profile).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <img\n          alt='Background'\n          className={styles.backgroundImage}\n          src={profileBackground}\n        />\n      </div>\n      <div className={styles.userInfoSection}>\n        <div className={styles.userAvatarSection}>\n          <img\n            alt={profile.fullName + ' user avatar'}\n            className={styles.userAvatar}\n            src={profile.photos.large || AnonymousUserPhoto}\n          />\n          {isOwner && (\n            <div className={styles.inputFileButtonContainer}>\n              <input\n                className={styles.inputFile}\n                id='file'\n                name='file'\n                onChange={onMainPhotoSelected}\n                type='file'\n              />\n              <label htmlFor='file'>Change avatar</label>\n            </div>\n          )}\n        </div>\n        <div className={styles.editModeContainer}>\n          <div className={styles.statusContainer}>\n            <ProfileStatus\n              isOwner={isOwner}\n              status={status}\n              updateStatus={updateStatus}\n            />\n          </div>\n          {editMode ? (\n            <ProfileDataFormReduxForm\n              initialValues={profile}\n              onSubmit={onSubmit}\n              profile={profile}\n            />\n          ) : (\n            <ProfileData\n              enableEditMode={() => setEditMode(true)}\n              isOwner={isOwner}\n              profile={profile}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { MyPostsContainer } from './myPosts/MyPostsContainer';\nimport { ProfileInfo } from './profileInfo/ProfileInfo';\nimport { ProfilePropsType } from './types';\n\nexport const Profile = (props: ProfilePropsType) => {\n  const { profile, isOwner, status, updateStatus, savePhoto, saveProfile } = props;\n\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n        profile={profile}\n        savePhoto={savePhoto}\n        saveProfile={saveProfile}\n        status={status}\n        updateStatus={updateStatus}\n      />\n      <MyPostsContainer isOwner={isOwner} userAvatar={profile?.photos.small} />\n    </div>\n  );\n};\n","import React, { Component, ComponentType } from 'react';\n\nimport { PATH } from 'enum/pathEnum';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport {\n  getStatus,\n  getUserProfile,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from 'store/reducers/profileReducer/profileReducer';\nimport { RootStateType } from 'store/types';\n\nimport { Profile } from './Profile';\nimport { MapDispatchToPropsType, MapStateToPropsType, ProfilePropsType } from './types';\n\nclass ProfileContainer extends Component<ProfilePropsType> {\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: Readonly<ProfilePropsType>) {\n    const { match } = this.props;\n\n    if (match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  refreshProfile() {\n    const { authorizedUserId, getStatus, getUserProfile, history, match } = this.props;\n\n    let userID;\n\n    if (match.params.userId) {\n      userID = Number(match.params.userId);\n    }\n\n    if (!userID) {\n      userID = authorizedUserId;\n\n      if (!userID) {\n        history.push(`/${PATH.LOGIN}`);\n      }\n    }\n\n    if (typeof userID === 'number') {\n      getUserProfile(userID);\n      getStatus(userID);\n    }\n  }\n\n  render() {\n    const { currentUser, match, profile, savePhoto, saveProfile, status, updateStatus } =\n      this.props;\n\n    return (\n      <Profile\n        {...this.props}\n        isOwner={\n          // if profile id is missing in the address bar\n          match.params.userId === undefined\n            ? true\n            : // else compare current user id with authenticated user id\n              +match.params.userId === currentUser\n        }\n        profile={profile}\n        savePhoto={savePhoto}\n        saveProfile={saveProfile}\n        status={status}\n        updateStatus={updateStatus}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  isOwner: state.profilePage.isOwner,\n  currentUser: state.auth.userId,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n});\n\nexport default compose<ComponentType>(\n  connect<MapStateToPropsType, MapDispatchToPropsType, object, RootStateType>(\n    mapStateToProps,\n    { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile },\n  ),\n  withRouter,\n)(ProfileContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"formsControls_formControlError__H4ZXC\",\"formSummaryError\":\"formsControls_formSummaryError__+1fih\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {\n        ;\n      }\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["FormControl","props","meta","children","hasError","error","touched","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","INPUT_MAX_LENGTH","MOBILE_USERS_PORTION_SIZE","DESKTOP_USERS_PORTION_SIZE","required","value","maxLengthCreator","maxLength","length","reduxForm","form","handleSubmit","onSubmit","Button","type","Post","message","likesCount","userAvatar","alt","src","AnonymousUserAvatar","MyPosts","memo","postsElements","posts","map","post","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","isOwner","formData","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","Contact","contactTitle","contactValue","ProfileData","profile","enableEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","key","every","el","ProfileDataFormReduxForm","inputErrorStyle","ProfileStatus","editMode","status","onStatusChange","event","setState","currentTarget","deactivateEditMode","updateStatus","activateEditMode","prevProps","this","propsStatus","stateStatus","autoFocus","onBlur","onChange","role","tabIndex","Component","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","profileBackground","photos","large","AnonymousUserPhoto","target","files","htmlFor","initialValues","then","Profile","small","ProfileContainer","refreshProfile","match","params","userId","userID","authorizedUserId","getStatus","getUserProfile","history","Number","push","PATH","currentUser","undefined","compose","auth","isAuth","withRouter","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}