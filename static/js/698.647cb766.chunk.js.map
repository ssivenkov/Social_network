{"version":3,"file":"static/js/698.647cb766.chunk.js","mappings":"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","sources":["components/common/formsControls/FormsControls.tsx","constants/common.ts","helpers/validations.ts","webpack://samurai/./src/pages/loginPage/loginPage.module.scss?c2e2","pages/loginPage/LoginPage.tsx","webpack://samurai/./src/components/common/formsControls/formsControls.module.scss?cbc3"],"sourcesContent":["import React from 'react';\n\nimport { Field } from 'redux-form';\n\nimport styles from './formsControls.module.scss';\n\nexport const FormControl = (props: any) => {\n  const { meta, children } = props;\n\n  const hasError = meta.error && meta.touched;\n\n  return (\n    <div className={hasError ? styles.formControlError : ''}>\n      <div>{children}</div>\n      <div>{hasError && <span>{meta.error}</span>}</div>\n    </div>\n  );\n};\n\nexport const Textarea = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder = '',\n  name: string,\n  validators: any[],\n  component: any,\n  props = {},\n  text = '',\n  wrapperClass: any,\n  fieldClass: any,\n) => (\n  <div className={wrapperClass}>\n    <Field\n      component={component}\n      name={name}\n      placeholder={placeholder}\n      validate={validators}\n      {...props}\n      className={fieldClass}\n    />\n    {text}\n  </div>\n);\n","export const INPUT_MAX_LENGTH = 100;\nexport const MOBILE_USERS_PORTION_SIZE = 5;\nexport const DESKTOP_USERS_PORTION_SIZE = 15;\n","export const required = (value: string) => {\n  if (value) {\n    return undefined;\n  }\n\n  return 'Field is required';\n};\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  }\n\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"loginPage_container__HmaHg\",\"textContainer\":\"loginPage_textContainer__AmG4B\",\"text\":\"loginPage_text__jjGJ3\",\"formContainer\":\"loginPage_formContainer__gxCtF\",\"field\":\"loginPage_field__xb+Bi\",\"input\":\"loginPage_input__l5eyj\",\"error\":\"loginPage_error__vU7RJ\",\"button\":\"loginPage_button__ekYdb\"};","import { INPUT_MAX_LENGTH } from 'constants/common';\n\nimport React from 'react';\n\nimport { Button } from 'components/common/button/Button';\nimport { createField, Input } from 'components/common/formsControls/FormsControls';\nimport inputErrorStyle from 'components/common/formsControls/formsControls.module.scss';\nimport { PATH } from 'enum/pathEnum';\nimport { maxLengthCreator, required } from 'helpers/validations';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { login } from 'store/reducers/authReducer/authReducer';\nimport { RootStateType } from 'store/types';\n\nimport styles from './loginPage.module.scss';\nimport { FormDataType, LoginFormPropsType, LoginPropsType } from './types';\n\nconst maxLength = maxLengthCreator(INPUT_MAX_LENGTH);\n\nconst LoginForm = (\n  params: InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType,\n) => {\n  const { handleSubmit, error, captchaUrl } = params;\n\n  return (\n    <form className={styles.formContainer} onSubmit={handleSubmit}>\n      {createField(\n        'Email',\n        'email',\n        [required],\n        Input,\n        {},\n        '',\n        styles.field,\n        styles.input,\n      )}\n\n      {createField(\n        'Password',\n        'password',\n        [required, maxLength],\n        Input,\n        {},\n        '',\n        styles.field,\n        styles.input,\n      )}\n\n      {createField(\n        'Password',\n        'rememberMe',\n        [],\n        Input,\n        { type: 'checkbox' },\n        'Remember me',\n        styles.field,\n        '',\n      )}\n\n      {captchaUrl && (\n        <div>\n          <div>\n            <img alt='Captcha' src={captchaUrl} />\n          </div>\n        </div>\n      )}\n\n      {captchaUrl &&\n        createField(\n          'Symbols from image',\n          'captcha',\n          [required],\n          Input,\n          {},\n          '',\n          styles.field,\n          styles.input,\n        )}\n\n      {error && <div className={inputErrorStyle.formSummaryError}>{error}</div>}\n      <div className={styles.field}>\n        <Button className={styles.button} type='submit'>\n          Submit\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({ form: 'login' })(\n  LoginForm,\n);\n\nconst LoginPage = (props: LoginPropsType) => {\n  const { captchaUrl, isAuth, login } = props;\n\n  const onSubmit = (formData: FormDataType) => {\n    login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n  };\n\n  if (isAuth) {\n    return <Redirect to={`/${PATH.PROFILE}`} />;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.textContainer}>\n        <p className={styles.text}>\n          {'To log in get registered '}\n          <a href='src/pages/loginPage/LoginPage' rel='noreferrer' target='_blank'>\n            here\n          </a>\n        </p>\n        <p className={styles.text}>Or use common test account credentials:</p>\n        <p className={styles.text}>Email: free@samuraijs.com</p>\n        <p className={styles.text}>Password: free</p>\n      </div>\n      <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootStateType) => ({\n  isAuth: state.auth.isAuth,\n  captchaUrl: state.auth.captchaUrl,\n});\n\nexport default connect(mapStateToProps, { login })(LoginPage);\n","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"formsControls_formControlError__H4ZXC\",\"formSummaryError\":\"formsControls_formSummaryError__+1fih\"};"],"names":["FormControl","props","meta","children","hasError","error","touched","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","INPUT_MAX_LENGTH","MOBILE_USERS_PORTION_SIZE","DESKTOP_USERS_PORTION_SIZE","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","params","handleSubmit","captchaUrl","onSubmit","type","alt","src","inputErrorStyle","Button","connect","state","isAuth","auth","login","to","PATH","href","rel","target","formData","email","password","rememberMe","captcha"],"sourceRoot":""}