{"version":3,"file":"static/js/44.46acbc93.chunk.js","mappings":"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","sources":["components/common/formsControls/FormsControls.tsx","constants/common.ts","helpers/validations.ts","hoc/withAuthRedirect.tsx","webpack://samurai/./src/pages/dialogsPage/avatarItem/avatarItem.module.scss?e23f","pages/dialogsPage/avatarItem/AvatarItem.tsx","webpack://samurai/./src/pages/dialogsPage/dialogs.module.scss?2b9b","webpack://samurai/./src/pages/dialogsPage/dialogsItem/dialogItem.module.scss?eb9f","pages/dialogsPage/dialogsItem/DialogItem.tsx","webpack://samurai/./src/pages/dialogsPage/message/message.module.scss?4609","pages/dialogsPage/message/Message.tsx","pages/dialogsPage/Dialogs.tsx","pages/dialogsPage/DialogsContainer.tsx","webpack://samurai/./src/components/common/formsControls/formsControls.module.scss?cbc3"],"sourcesContent":["import React from 'react';\n\nimport { Field } from 'redux-form';\n\nimport styles from './formsControls.module.scss';\n\nexport const FormControl = (props: any) => {\n  const { meta, children } = props;\n\n  const hasError = meta.error && meta.touched;\n\n  return (\n    <div className={hasError ? styles.formControlError : ''}>\n      <div>{children}</div>\n      <div>{hasError && <span>{meta.error}</span>}</div>\n    </div>\n  );\n};\n\nexport const Textarea = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props: any) => {\n  const { input, ...restProps } = props;\n\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder = '',\n  name: string,\n  validators: any[],\n  component: any,\n  props = {},\n  text = '',\n  wrapperClass: any,\n  fieldClass: any,\n) => (\n  <div className={wrapperClass}>\n    <Field\n      component={component}\n      name={name}\n      placeholder={placeholder}\n      validate={validators}\n      {...props}\n      className={fieldClass}\n    />\n    {text}\n  </div>\n);\n","export const INPUT_MAX_LENGTH = 100;\nexport const MOBILE_USERS_PORTION_SIZE = 5;\nexport const DESKTOP_USERS_PORTION_SIZE = 15;\n","export const required = (value: string) => {\n  if (value) {\n    return undefined;\n  }\n\n  return 'Field is required';\n};\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  }\n\n  return undefined;\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { PATH } from 'enum/pathEnum';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { RootStateType } from 'store/types';\n\ntype MapStateToPropsType = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect<TWrappedComponentProps>(\n  WrappedComponent: FunctionComponent<TWrappedComponentProps>,\n) {\n  const RedirectComponent = (props: MapStateToPropsType) => {\n    const { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={`/${PATH.LOGIN}`} />;\n\n    return <WrappedComponent {...(restProps as TWrappedComponentProps)} />;\n  };\n\n  return connect<MapStateToPropsType, object, TWrappedComponentProps, RootStateType>(\n    mapStateToProps,\n    {},\n  )(RedirectComponent);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"avatarItem_avatar__aTTUi\"};","import React from 'react';\n\nimport styles from './avatarItem.module.scss';\nimport { AvatarItemPropsType } from './types';\n\nexport const AvatarItem = (props: AvatarItemPropsType) => {\n  const { link } = props;\n\n  return (\n    <div>\n      <img alt='User avatar' className={styles.avatar} src={link} />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"dialogs_container__GZIfk\",\"dialogs\":\"dialogs_dialogs__0USTu\",\"dialogsItems\":\"dialogs_dialogsItems__Q1U7t\",\"messages\":\"dialogs_messages__eNN2w\",\"inputContainer\":\"dialogs_inputContainer__657Hb\",\"input\":\"dialogs_input__PfE0B\",\"sendButton\":\"dialogs_sendButton__3ymkX\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"dialogItem_dialog__LxHBY\",\"active\":\"dialogItem_active__gpuuq\"};","import React from 'react';\n\nimport { PATH } from 'enum/pathEnum';\nimport { NavLink } from 'react-router-dom';\n\nimport styles from './dialogItem.module.scss';\nimport { DialogItemPropsType } from './types';\n\nexport const DialogItem = (props: DialogItemPropsType) => {\n  const { id, name } = props;\n\n  const path = `/${PATH.DIALOGS}/${id}`;\n\n  return (\n    <NavLink activeClassName={styles.active} className={styles.dialog} to={path}>\n      {name}\n    </NavLink>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"message_message__CnINV\"};","import React from 'react';\n\nimport styles from './message.module.scss';\nimport { MessagePropsType } from './types';\n\nexport const Message = (props: MessagePropsType) => {\n  const { message } = props;\n\n  return (\n    <div>\n      <span className={styles.message}>{message}</span>\n    </div>\n  );\n};\n","import { INPUT_MAX_LENGTH } from 'constants/common';\n\nimport React from 'react';\n\nimport { Button } from 'components/common/button/Button';\nimport { createField, Textarea } from 'components/common/formsControls/FormsControls';\nimport { maxLengthCreator, required } from 'helpers/validations';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { AvatarItem } from './avatarItem/AvatarItem';\nimport styles from './dialogs.module.scss';\nimport { DialogItem } from './dialogsItem/DialogItem';\nimport { Message } from './message/Message';\nimport { DialogsPropsType, FormDataType } from './types';\n\nconst maxLength = maxLengthCreator(INPUT_MAX_LENGTH);\n\nconst NewMessageForm = (params: InjectedFormProps<FormDataType>) => {\n  const { handleSubmit } = params;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {createField(\n        'Enter your message',\n        'newMessageBody',\n        [required, maxLength],\n        Textarea,\n        {},\n        '',\n        '',\n        styles.input,\n      )}\n      <div>\n        <Button className={styles.sendButton} type='submit'>\n          Send\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst NewMessageReduxForm = reduxForm<FormDataType>({ form: 'dialogAddMessageForm' })(\n  NewMessageForm,\n);\n\nexport const Dialogs = (props: DialogsPropsType) => {\n  const { avatars, dialogs, messages, sendMessage } = props;\n\n  const avatarsElements = avatars.map((avatar) => {\n    const { id, link } = avatar;\n\n    return <AvatarItem id={id} key={id} link={link} />;\n  });\n\n  const dialogsElements = dialogs.map((dialog) => {\n    const { id, name } = dialog;\n\n    return <DialogItem id={id} key={id} name={name} />;\n  });\n\n  const messagesElements = messages.map((messageItem) => {\n    const { id, message } = messageItem;\n\n    return <Message id={id} key={id} message={message} />;\n  });\n\n  const addNewMessage = (formData: FormDataType) => {\n    sendMessage(formData.newMessageBody);\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.dialogs}>\n        <div className={styles.dialogsItems}>{avatarsElements}</div>\n        <div className={styles.dialogsItems}>{dialogsElements}</div>\n      </div>\n      <div className={styles.messages}>\n        <div>{messagesElements}</div>\n        <div className={styles.inputContainer}>\n          <NewMessageReduxForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ComponentType } from 'react';\n\nimport { withAuthRedirect } from 'hoc/withAuthRedirect';\nimport { connect } from 'react-redux';\nimport { compose, Dispatch } from 'redux';\nimport { sendMessage } from 'store/reducers/dialogsReducer/dialogsReducer';\nimport { RootStateType } from 'store/types';\n\nimport { Dialogs } from './Dialogs';\nimport { MapDispatchToPropsType, MapStateToPropsType } from './types';\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    avatars: state.dialogsPage.avatars,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    sendMessage: (newMessageBody: string) => {\n      dispatch(sendMessage(newMessageBody));\n    },\n  };\n};\n\nexport default compose<ComponentType>(\n  connect<MapStateToPropsType, MapDispatchToPropsType, object, RootStateType>(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n  withAuthRedirect,\n)(Dialogs);\n","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"formsControls_formControlError__H4ZXC\",\"formSummaryError\":\"formsControls_formSummaryError__+1fih\"};"],"names":["FormControl","props","meta","children","hasError","error","touched","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","INPUT_MAX_LENGTH","MOBILE_USERS_PORTION_SIZE","DESKTOP_USERS_PORTION_SIZE","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","AvatarItem","link","alt","src","DialogItem","id","path","PATH","activeClassName","to","Message","message","NewMessageReduxForm","reduxForm","form","params","handleSubmit","onSubmit","Button","type","compose","connect","dialogs","dialogsPage","messages","avatars","dispatch","sendMessage","newMessageBody","WrappedComponent","avatarsElements","map","avatar","dialogsElements","dialog","messagesElements","messageItem","formData"],"sourceRoot":""}